activacion ambiente virtual:

C:\Users\fabian\Documents\api-django\env\Scripts\activate
python C:\Users\fabian\Documents\api-django\project\manage.py runserver

- Food State: se refiere al estado de la comida: 'falta definir el significado de cada estado de comida'
- Consumed: tambien es un bolean

cambiar     possible_expiration_date = models.DateField()

- hay que cambiar el valor estatico de la categoria de alimentos, de momneto hacerlo en el frontend
pero deberia hacerce desde backend

intolerance allergies, debe pasar a ser una tabla completa, pero no es prioridad

- prioridad pasar a tener tipos de datos nulos

imagen_scr, como almacenar imagenes


- cambiar el user_data al usuario que trae por defecto dajngo

- en flutter falta descargar el visualstudio https://visualstudio.microsoft.com/es/downloads/ la version comunity y dentro falta 

[X] Visual Studio - develop Windows apps
    X Visual Studio not installed; this is necessary to develop Windows apps.
      Download at https://visualstudio.microsoft.com/downloads/.
      Please install the "Desktop development with C++" workload, including all of its default components


[X] Android toolchain - develop for Android devices
    X Unable to locate Android SDK.
      Install Android Studio from: https://developer.android.com/studio/index.html
      On first launch it will assist you in installing the Android SDK components.
      (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions).
      If the Android SDK has been installed to a custom location, please use
      `flutter config --android-sdk` to update to that location.


Habilitar el modo desarrolladores, en una terminar cmd ejecutar:
  `start ms-settings:developers` y activar el modelulo: para desarrolladores


DA IGUAL QUE ID PONGA EN UN POST: SIEMPRE SI ESTA AUTO INCREMENTAL NO LO CONTARA


ESTOY IMPOTANDO LA BIBLIOTECA PILLOW, PARA PODER SUBIR UNA IMAGEN

Datos de la API que necesito 

- nombre: x.product.brands
- tags: x.product.brands_tags[0], x.product.brands_tags[1]
- categoria: x.product.categories
- alergias: x.product.allergens_from_user
- cantidad en gramos: x.product.quantity

----------------------------------- funciones usadas ------------------------------

def test_eval2(request):
    path_image = r'C:\\Users\\fabian\\Documents\\api-django\\project\\media\\media\\boleta_2_code.jpg' # ruta donde quedo almacenada la imagen
    path_image = r'../media/media/boleta_2_code.jpg'
    path = settings.MEDIA_ROOT + '\\media\\'
    path = path.replace('\\', '/')
    # print(f"path_image: {path_image}")
    # func_to_get_values(path_image=path_image) # se hace que se evalue la imagen / serializer.data 
    # return HttpResponse(settings.MEDIA_ROOT)
    return HttpResponse(path) 

def test_eval(request):
    path_image = r'C:\\Users\\fabian\\Documents\\api-django\\project\\media\\media\\boleta_2_code.jpg' # ruta donde quedo almacenada la imagen
    path_image = r'../media/media/boleta_2_code.jpg'
    path = settings.MEDIA_ROOT
    # print(f"path_image: {path_image}")
    func_to_get_values(path_image=path_image) # se hace que se evalue la imagen / serializer.data 
    # return HttpResponse(settings.MEDIA_ROOT)
    return HttpResponse(path)
   

# ruta_archivo = '/media/media/only_code.jpg'

# # Usando el método rsplit() para dividir la cadena por '/'
# partes = ruta_archivo.rsplit('/', 1)

# # partes contendrá ['', 'only_code.jpg']
# # El último elemento de partes es lo que está después de la última barra
# nombre_archivo = partes[-1]


# La diferencia con el otro es que se le debe pasar por parametro el valor de la llave primaria de User_data
# def create_product_from_dict2(product_data: dict, pk: int):
#     user = UserData.objects.get(pk=pk)
#     try:
#         print('create_product')
#         print('product: ', product_data)
#         product = Food.objects.create(
#             user = user,
#             food_name = product_data['food_name'], # str
#             # category = product_data['category'], # str
#             food_amount_g = limpiar_y_convertir(product_data['food_amount_g']), # Float
#             img_src = product_data['img_src'] # str
#         )
#         return product
#     except Exception as e:
#         return f"An error occurred while saving to the database: {e}"

---------------------------------      USADA EN VIEW       -------------------------------



# view para model food
def create_model(request):
    user = UserData.objects.get(pk=1)

    product_data = {
        'food_name': 'bon o bon,Arcor', 
        'category': 'Botanas,Snacks dulces,Galletas y pasteles,Galletas,Galletas rellenas', 
        'food_amount_g': '95 g', 
        'img_src': 'https://images.openfoodfacts.org/images/products/780/222/564/0770/front_es.9.400.jpg'
        }

    Food.objects.create(
            user = user,
            food_name = product_data['food_name'], # str
            # category = product_data['category'], # str
            food_amount_g = clean(product_data['food_amount_g']), # Float
            img_src = product_data['img_src'] # str
        )
    return HttpResponse("Product")
        

